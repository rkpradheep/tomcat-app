import org.gradle.internal.os.OperatingSystem

ext.serverPath = "${home}/tomcat_server"
sourceSets {
    main {
        java {
            srcDirs = ["${serverPath}/src"]
            outputDir = file ("${serverPath}/classes/")
        }
        compileClasspath = fileTree ("${serverPath}/webapps/WEB-INF/lib/") + fileTree ("${serverPath}/tomcat/lib")
    }
}

ext.replaceToken = { filePath, entries ->

    if(entries) {
        File file = new File(filePath)
        if(file.exists ()) {
            String contents = file.getText ('UTF-8')
            entries.each() {
                if(it.to.contains('$')) {
                    contents = contents.replace(it.from, it.to)
                }
                else {
                    contents = contents.replaceAll(it.from, it.to)
                }
            }
            new File(filePath).write( contents, 'UTF-8' )
        }
    }

}

ext.configureTaskDependencies = { task, dependentTasks ->
    task.dependsOn (dependentTasks)
    for (int i = 0; i < dependentTasks.size () - 1; i++) {
        dependentTasks [i + 1].mustRunAfter dependentTasks [i]
    }
}

task bundleResource {
    doLast {
        new File ("${serverPath}/build/tomcat_server").mkdirs()

        copy {
            from "${serverPath}/webapps/"
            into "${serverPath}/build/tomcat_server"
        }

        copy {
            from "${serverPath}/classes"
            exclude "com/server/tomcat", "com/server/security"
            into "${serverPath}/build/tomcat_server/WEB-INF/classes"
        }

        copy {
            from "${serverPath}/resources"
            into "${serverPath}/build/tomcat_server/WEB-INF/classes"
        }

        copy {
            from "${home}/app.properties"
            into "${serverPath}/classes/com/server/security"
        }

        copy {
            from "${serverPath}/lib"
            exclude 'servlet-api.jar', 'websocket-api.jar'
            into "${serverPath}/build/tomcat_server/WEB-INF/lib"
        }

        println "Resource bundle completed"

    }
}


task packRootWar(type: War) {
    archiveFileName = "ROOT.war"
    from "${serverPath}/build/tomcat_server"
    destinationDir = file("${serverPath}/build")
}

task deployBuild{
    doLast{
        if(file("${home}/tomcat_build/webapps/ROOT").listFiles() != null)
        {
            delete file("${home}/tomcat_build/webapps/ROOT")
        }
        copy {
            from "${serverPath}/build/ROOT.war"
            into "${home}/tomcat_build/webapps"
        }

        println "deploy build completed"
    }
}

task setupTomcatContainer{
    doLast{
        println "Tomcat deployment path ${home}/tomcat_build"

        new File ("${home}/tomcat_build").mkdirs()
        delete "${home}/tomcat_build/*"
        copy{
            from "${serverPath}/tomcat/"
            into "${home}/tomcat_build"
        }
        replaceToken("${home}/tomcat_build/bin/setenv.sh", [
                [from: "MY_HOME=",
                 to: "MY_HOME=${home}"
                ]
        ])
        copy{
            from "${serverPath}/build/CustomTomcatValves.jar"
            into "${home}/tomcat_build/lib"
        }
        copy{
            from "${serverPath}/build/security.jar"
            into "${home}/tomcat_build/lib"
        }

        println "set up tomcat container completed"
    }
}


task buildTomcatValvesJar(type: Jar) {
    archiveFileName = "CustomTomcatValves.jar"
    from "${serverPath}/classes"
    include "com/server/tomcat/CustomErrorReportValve.class"
    destinationDir = file("${serverPath}/build")
}

task buildSecurityJar(type: Jar) {
    archiveFileName = "security.jar"
    from "${serverPath}/classes"
    include 'com/server/security/**'
    destinationDir = file("${serverPath}/build")
}

task fullBuild{
    doLast{
        println "Full build completed"
    }
}

task cleanUp{
    doLast{
        delete "${home}/build"
        delete "${serverPath}/build"
        delete "${serverPath}/classes"
        println "clean up completed"
    }
}

task startTomcat{
    doLast{
        def response = new ByteArrayOutputStream()
        def error = new ByteArrayOutputStream()
        exec {
            workingDir "${home}/tomcat_build"
            commandLine getTomcatCommand(true)
            standardOutput = response
            errorOutput = error
        }
        println "tomcat started"
    }
}

task stopTomcat{
    doLast{
        try {
            def response = new ByteArrayOutputStream()
            def error = new ByteArrayOutputStream()
            exec {
                workingDir "${home}/tomcat_build"
                commandLine getTomcatCommand(false)
                standardOutput = response
                errorOutput = error
            }
            sleep(3 * 1000)
            println "tomcat stopped"
        }
        catch (Exception e)
        {

        }
    }
}

task updateBuild{
    doLast{
        println "update completed"
    }
}

def getTomcatCommand(isStart)
{
    def isWindows = OperatingSystem.current().isWindows()
    if (isWindows)
    {
        return isStart ? ["cmd","/c","run.bat", "start"] :  ["cmd","/c","run.bat", "stop"]
    }
    else {
        return isStart ? ["sh","run.sh","start"] :  ["sh","run.sh","stop"]
    }
}

configureTaskDependencies(fullBuild, [build, bundleResource, packRootWar, buildTomcatValvesJar, buildSecurityJar, setupTomcatContainer, deployBuild, cleanUp])
configureTaskDependencies(updateBuild, [build, bundleResource, packRootWar, stopTomcat, deployBuild, cleanUp, startTomcat])

defaultTasks 'updateBuild'
