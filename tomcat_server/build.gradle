import org.gradle.internal.os.OperatingSystem

import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

ext.serverPath = "${home}/tomcat_server"
sourceSets {
    main {
        java {
            srcDirs = ["${serverPath}/src"]
            outputDir = file ("${serverPath}/classes/")
        }
        compileClasspath = fileTree ("${serverPath}/webapps/WEB-INF/lib/") + fileTree ("${serverPath}/tomcat/lib") + fileTree ("${serverPath}/tomcat/shared/lib")
    }
}

task bundleResource {
    doLast {
        new File ("${serverPath}/build/tomcat_server").mkdirs()

        copy {
            from "${serverPath}/webapps/"
            into "${serverPath}/build/tomcat_server"
        }

        copy {
            from "${serverPath}/classes"
            exclude "com/server/tomcat", "com/server/security"
            into "${serverPath}/build/tomcat_server/WEB-INF/classes"
        }

        copy {
            from "${serverPath}/resources"
            into "${serverPath}/build/tomcat_server/WEB-INF/classes"
        }

        copy{
            from "${serverPath}/build/security.jar"
            into "${serverPath}/build/tomcat_server/WEB-INF/lib"
        }

        println "Resource bundle completed"

    }
}


task packRootWar(type: War) {
    archiveFileName = "ROOT.war"
    from "${serverPath}/build/tomcat_server"
    destinationDir = file("${serverPath}/build")
}

task packManagerWar(type: War) {
    archiveFileName = "manager.war"
    from "${home}/tomcat_build/webapps/manager"
    destinationDir = file("${home}/tomcat_build/webapps")
}

task packTomcatWar(type: War) {
    archiveFileName = "tomcat.war"
    from "${home}/tomcat_build/webapps/tomcat"
    destinationDir = file("${home}/tomcat_build/webapps")
}

task deployBuild{
    doLast{
        if(file("${home}/tomcat_build/webapps/ROOT").listFiles() != null)
        {
            delete file("${home}/tomcat_build/webapps/ROOT")
        }
        copy {
            from "${serverPath}/build/ROOT.war"
            into "${home}/tomcat_build/webapps"
        }

        println "deploy build completed"
    }
}

task setupTomcatContainer{
    doLast{
        println "Tomcat deployment path ${home}/tomcat_build"

        new File ("${home}/tomcat_build").mkdirs()
        delete "${home}/tomcat_build/*"
        new File ("${home}/tomcat_build/logs").mkdirs()
        copy{
            from "${serverPath}/tomcat/"
            into "${home}/tomcat_build"
        }

        exec {
            commandLine "sed", "-i", "s|home_ph|${home}|", "${home}/tomcat_build/run.sh"
        }

        exec {
            commandLine "sed", "-i", "s|production_ph|${System.getenv ("PRODUCTION")}|", "${home}/tomcat_build/run.sh"
        }

        packNonROOTWebApps ()

        println "set up tomcat container completed"
    }
}


def packNonROOTWebApps()
{
    copy{
        from "${serverPath}/build/security.jar"
        into "${home}/tomcat_build/webapps/manager/WEB-INF/lib"
    }
    copy{
        from "${serverPath}/build/tomcat_server/WEB-INF/conf/login.html"
        into "${home}/tomcat_build/webapps/manager"
    }
    copy{
        from "${serverPath}/build/tomcat_server/css/login.css"
        into "${home}/tomcat_build/webapps/manager/css"
    }
    copy{
        from "${serverPath}/build/tomcat_server/js/login.js"
        into "${home}/tomcat_build/webapps/manager/js"
    }

    replaceToken("${home}/tomcat_build/webapps/manager/js/login.js", [
            [from: "/api/v1/authenticate",
             to: "/manager/api/v1/authenticate"
            ]
    ])
    copy{
        from "${serverPath}/build/tomcat_server/js/common.js"
        into "${home}/tomcat_build/webapps/manager/js"
    }
    copy{
        from "${serverPath}/build/tomcat_server/css/loading.css"
        into "${home}/tomcat_build/webapps/manager/css"
    }

    copy{
        from "${serverPath}/build/security.jar"
        into "${home}/tomcat_build/webapps/tomcat/WEB-INF/lib"
    }
    copy{
        from "${serverPath}/build/tomcat_server/WEB-INF/conf/login.html"
        into "${home}/tomcat_build/webapps/tomcat"
    }
    copy{
        from "${serverPath}/build/tomcat_server/css/login.css"
        into "${home}/tomcat_build/webapps/tomcat/css"
    }
    copy{
        from "${serverPath}/build/tomcat_server/js/login.js"
        into "${home}/tomcat_build/webapps/tomcat/js"
    }

    replaceToken("${home}/tomcat_build/webapps/tomcat/js/login.js", [
            [from: "/api/v1/authenticate",
             to: "/tomcat/api/v1/authenticate"
            ]
    ])
    copy{
        from "${serverPath}/build/tomcat_server/js/common.js"
        into "${home}/tomcat_build/webapps/tomcat/js"
    }
    copy {
        from "${serverPath}/build/tomcat_server/css/loading.css"
        into "${home}/tomcat_build/webapps/tomcat/css"
    }

    replaceToken("${home}/tomcat_build/bin/setenv.sh", [
            [from: "MY_HOME=",
             to: "MY_HOME=${home}"
            ]
    ])
    replaceToken("${home}/tomcat_build/bin/setenv.sh", [
            [from: "PRODUCTION=",
             to: "PRODUCTION=${Boolean.valueOf (System.getenv ("PRODUCTION"))}"
            ]
    ])
    if (System.getenv ("CUSTOM_KEYSTORE_FILE") != null) {
        copy{
            from "${home}/custom/${System.getenv ("CUSTOM_KEYSTORE_FILE")}"
            into "${home}/tomcat_build/conf/"
        }
        replaceToken ("${home}/tomcat_build/conf/server.xml", [
                [from: "tomcat.jks",
                 to  : "${System.getenv ("CUSTOM_KEYSTORE_FILE")}"
                ],
                [from: "keystorePass=\"tomcat\"",
                 to  : "keystorePass=\"${System.getenv ("CUSTOM_KEYSTORE_PASSWORD")}\""
                ]
        ])
    }
    if (System.getenv ("TOMCAT_CUSTOM_HTTP_PORT") != null)
    {
        replaceToken ("${home}/tomcat_build/conf/server.xml", [
                [from: "port=\"80\"",
                 to  : "port=\"${System.getenv ("TOMCAT_CUSTOM_HTTP_PORT")}\""
                ]
        ])
    }
    if (System.getenv ("TOMCAT_CUSTOM_HTTPS_PORT") != null)
    {
        replaceToken ("${home}/tomcat_build/conf/server.xml", [
                [from: "port=\"443\"",
                 to  : "port=\"${System.getenv ("TOMCAT_CUSTOM_HTTPS_PORT")}\""
                ]
        ])
    }
    copy{
        from "${serverPath}/build/CustomTomcatValves.jar"
        into "${home}/tomcat_build/lib"
    }
}

task buildTomcatValvesJar(type: Jar) {
    archiveFileName = "CustomTomcatValves.jar"
    from "${serverPath}/classes"
    include "com/server/tomcat/*"
    destinationDir = file("${serverPath}/build")
}

task buildSecurityJar(type: Jar) {
    archiveFileName = "security.jar"
    from "${serverPath}/classes"
    include 'com/server/security/**'
    destinationDir = file("${serverPath}/build")
}

task setupServer{
    doLast{
        println "server setup completed"
    }
}

task cleanUp{
    doLast{
        delete "${home}/build"
        delete "${serverPath}/build"
        delete "${serverPath}/classes"
        println "clean up completed"
    }
}

task startTomcat{
    doLast{
        def response = new ByteArrayOutputStream()
        def error = new ByteArrayOutputStream()
        exec {
            workingDir "${home}/tomcat_build"
            commandLine getTomcatCommand(true)
            standardOutput = response
            errorOutput = error
        }
        println "tomcat started"
    }
}

task stopTomcat{
    doLast{
        try {
            def response = new ByteArrayOutputStream()
            def error = new ByteArrayOutputStream()
            exec {
                workingDir "${home}/tomcat_build"
                commandLine getTomcatCommand(false)
                standardOutput = response
                errorOutput = error
            }
            sleep(3 * 1000)
            println "tomcat stopped"
        }
        catch (Exception e)
        {

        }
    }
}

task updateBuild{
    doLast{
        println "update completed"
    }
}

def getTomcatCommand(isStart)
{
    def isWindows = OperatingSystem.current().isWindows()
    if (isWindows)
    {
        return isStart ? ["cmd","/c","run.bat", "start"] :  ["cmd","/c","run.bat", "stop"]
    }
    else {
        return isStart ? ["sh","run.sh","start"] :  ["sh","run.sh","stop"]
    }
}

task copyProperyFile{
    doLast{
        copy {
            from "${home}/app.properties"
            into "${serverPath}/classes/com/server/security"
        }

        def appPropsFile = new File("${serverPath}/classes/com/server/security/app.properties")
        Properties properties = new Properties();
        properties.load(appPropsFile.newDataInputStream());
        properties.setProperty("build.label", LocalDateTime.ofInstant(Instant.ofEpochMilli(System.currentTimeMillis ()), ZoneId.of ("Asia/Calcutta")).format(DateTimeFormatter.ofPattern("MMM_dd_yyyy_HH_mm")))

        def secretPropsFile = new File("${home}/custom/custom.properties")
        if (secretPropsFile.exists ())
        {
            println "custom.properties found"
            def secretProperties = new Properties()
            secretProperties.load(secretPropsFile.newDataInputStream())
            secretProperties.keySet().each { secretKey -> properties.setProperty (secretKey, secretProperties.getProperty (secretKey.toString ()))}
        }
        if (System.getenv ("DB_SERVER") == "mysql")
        {
            properties.setProperty("db.server", "mysql")
        }

        properties.store (appPropsFile.newWriter(), null)

        println "Copy property file completed"
    }
}
configureTaskDependencies(build, [copyProperyFile])
configureTaskDependencies(setupServer, [build, buildSecurityJar, bundleResource, packRootWar, buildTomcatValvesJar, setupTomcatContainer, packManagerWar, packTomcatWar, deployBuild, cleanUp])

defaultTasks 'setupServer'
