/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2023-09-20 05:57:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class watson_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <title>Watson</title>\n");
      out.write("        <!--<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />-->\n");
      out.write("    </head>\n");
      out.write("    <style>\n");
      out.write("    .loading {\n");
      out.write("      position: fixed;\n");
      out.write("      z-index: 999;\n");
      out.write("      overflow: show;\n");
      out.write("      margin: auto;\n");
      out.write("      top: 0;\n");
      out.write("      left: 0;\n");
      out.write("      bottom: 0;\n");
      out.write("      right: 0;\n");
      out.write("      width: 50px;\n");
      out.write("      height: 50px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /* Transparent Overlay */\n");
      out.write("    .loading:before {\n");
      out.write("      content: '';\n");
      out.write("      display: block;\n");
      out.write("      position: fixed;\n");
      out.write("      top: 0;\n");
      out.write("      left: 0;\n");
      out.write("      width: 100%;\n");
      out.write("      height: 100%;\n");
      out.write("      background-color: rgba(255,255,255,0.5);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .loading:not(:required) {\n");
      out.write("      /* hide \"loading...\" text */\n");
      out.write("      font: 0/0 a;\n");
      out.write("      color: transparent;\n");
      out.write("      text-shadow: none;\n");
      out.write("      background-color: transparent;\n");
      out.write("      border: 0;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .loading:not(:required):after {\n");
      out.write("      content: '';\n");
      out.write("      display: block;\n");
      out.write("      font-size: 10px;\n");
      out.write("      width: 50px;\n");
      out.write("      height: 50px;\n");
      out.write("      margin-top: -0.5em;\n");
      out.write("\n");
      out.write("      border: 15px solid rgba(33, 150, 243, 1.0);\n");
      out.write("      border-radius: 100%;\n");
      out.write("      border-bottom-color: transparent;\n");
      out.write("      -webkit-animation: spinner 1s linear 0s infinite;\n");
      out.write("      animation: spinner 1s linear 0s infinite;\n");
      out.write("\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("    @-webkit-keyframes spinner {\n");
      out.write("      0% {\n");
      out.write("        -webkit-transform: rotate(0deg);\n");
      out.write("        -moz-transform: rotate(0deg);\n");
      out.write("        -ms-transform: rotate(0deg);\n");
      out.write("        -o-transform: rotate(0deg);\n");
      out.write("        transform: rotate(0deg);\n");
      out.write("      }\n");
      out.write("      100% {\n");
      out.write("        -webkit-transform: rotate(360deg);\n");
      out.write("        -moz-transform: rotate(360deg);\n");
      out.write("        -ms-transform: rotate(360deg);\n");
      out.write("        -o-transform: rotate(360deg);\n");
      out.write("        transform: rotate(360deg);\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    @-moz-keyframes spinner {\n");
      out.write("      0% {\n");
      out.write("        -webkit-transform: rotate(0deg);\n");
      out.write("        -moz-transform: rotate(0deg);\n");
      out.write("        -ms-transform: rotate(0deg);\n");
      out.write("        -o-transform: rotate(0deg);\n");
      out.write("        transform: rotate(0deg);\n");
      out.write("      }\n");
      out.write("      100% {\n");
      out.write("        -webkit-transform: rotate(360deg);\n");
      out.write("        -moz-transform: rotate(360deg);\n");
      out.write("        -ms-transform: rotate(360deg);\n");
      out.write("        -o-transform: rotate(360deg);\n");
      out.write("        transform: rotate(360deg);\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    @-o-keyframes spinner {\n");
      out.write("      0% {\n");
      out.write("        -webkit-transform: rotate(0deg);\n");
      out.write("        -moz-transform: rotate(0deg);\n");
      out.write("        -ms-transform: rotate(0deg);\n");
      out.write("        -o-transform: rotate(0deg);\n");
      out.write("        transform: rotate(0deg);\n");
      out.write("      }\n");
      out.write("      100% {\n");
      out.write("        -webkit-transform: rotate(360deg);\n");
      out.write("        -moz-transform: rotate(360deg);\n");
      out.write("        -ms-transform: rotate(360deg);\n");
      out.write("        -o-transform: rotate(360deg);\n");
      out.write("        transform: rotate(360deg);\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    @keyframes spinner {\n");
      out.write("      0% {\n");
      out.write("        -webkit-transform: rotate(0deg);\n");
      out.write("        -moz-transform: rotate(0deg);\n");
      out.write("        -ms-transform: rotate(0deg);\n");
      out.write("        -o-transform: rotate(0deg);\n");
      out.write("        transform: rotate(0deg);\n");
      out.write("      }\n");
      out.write("      100% {\n");
      out.write("        -webkit-transform: rotate(360deg);\n");
      out.write("        -moz-transform: rotate(360deg);\n");
      out.write("        -ms-transform: rotate(360deg);\n");
      out.write("        -o-transform: rotate(360deg);\n");
      out.write("        transform: rotate(360deg);\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("        body {\n");
      out.write("            margin: 0;\n");
      out.write("        }\n");
      out.write("        html {\n");
      out.write("            overflow-y: scroll;\n");
      out.write("        }\n");
      out.write("        button {\n");
      out.write("            background-color: #4caf50; /* Green */\n");
      out.write("            border: none;\n");
      out.write("            color: white;\n");
      out.write("            padding: 5px 12px;\n");
      out.write("            text-align: center;\n");
      out.write("            text-decoration: none;\n");
      out.write("            display: inline-block;\n");
      out.write("            font-size: 16px;\n");
      out.write("            margin: 4px 2px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            -webkit-transition-duration: 0.4s; /* Safari */\n");
      out.write("            transition-duration: 0.4s;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        button:hover {\n");
      out.write("            box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        option:hover {\n");
      out.write("            cursor: pointer;\n");
      out.write("            background-color: #d3d3d3;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .fixTableHead {\n");
      out.write("            overflow: auto;\n");
      out.write("            max-height: 500px;\n");
      out.write("            width: 100%;\n");
      out.write("        }\n");
      out.write("        .fixTableHead thead th {\n");
      out.write("            position: sticky;\n");
      out.write("            top: 0;\n");
      out.write("        }\n");
      out.write("        table {\n");
      out.write("            border-collapse: collapse;\n");
      out.write("        }\n");
      out.write("        th,\n");
      out.write("        td {\n");
      out.write("            padding: 8px 15px;\n");
      out.write("            border: 2px solid #529432;\n");
      out.write("        }\n");
      out.write("        th {\n");
      out.write("            background: #abdd93;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        tr:nth-child(even) {\n");
      out.write("            background-color: #dddddd;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    <body>\n");
      out.write("        <h1><b>Watson</b></h1>\n");
      out.write("        <div class=\"loading\" id=\"loading\" style=\"display:none\">Loading&#8230;</div>\n");
      out.write("        <br />\n");
      out.write("        <!--<p style=\"font-size: 11px;\">* Default values populated for Books Local.</p>-->\n");
      out.write("        <br />\n");
      out.write("        Product &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n");
      out.write("        <select id=\"product\" onchange=\"getDBCredential(true)\">\n");
      out.write("            <option value=\"books\">BOOKS LOCAL</option>\n");
      out.write("            <option value=\"pay\">PAY LOCAL</option>\n");
      out.write("             <option value=\"custom\">CUSTOM</option>\n");
      out.write("        </select>\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <form>\n");
      out.write("            Server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"radio\" id=\"mysql\" name=\"server\" value=\"mysql\" />\n");
      out.write("            <label for=\"mysql\">MySql</label>\n");
      out.write("            <input type=\"radio\" id=\"postgresql\" name=\"server\" value=\"postgresql\" />\n");
      out.write("            <label for=\"postgresql\">Postgresql</label><br />\n");
      out.write("            <br />\n");
      out.write("        </form>\n");
      out.write("        Main Cluster IP &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"text\" id=\"ip\" style=\"width: 400px; height: 25px;\" /><br />\n");
      out.write("        <br />\n");
      out.write("        User &nbsp;&nbsp;&nbsp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"text\" id=\"user\" style=\"width: 400px; height: 25px;\" />\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        Password &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"password\" id=\"password\" style=\"width: 400px; height: 25px;\" /><br />\n");
      out.write("        <!-- <select name=\"columnList\" id=\"columnList\">\n");
      out.write("            <option value=\"\" disabled selected>COLUMN</option>\n");
      out.write("        </select> -->\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        Enter either ZSID or PK Value : <br />\n");
      out.write("        <br />\n");
      out.write("        ZSID Or SpaceName &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"text\" id=\"zsid\" style=\"width: 400px; height: 25px;\" /><br />\n");
      out.write("        <br />\n");
      out.write("        PK Value &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"text\" id=\"pk\" style=\"width: 400px; height: 25px;\" /><br />\n");
      out.write("        <br />\n");
      out.write("        <!--<p>Click on <b>Enable Autocomplete and Quick Execution</b> button to enable intellisense support.</p>-->\n");
      out.write("        <br />\n");
      out.write("        <button id=\"quickExe\" onclick=\"getTables()\">Enable Quick Execution</button><br />\n");
      out.write("        <br />\n");
      out.write("        <div id=\"tableSelection\" style=\"display: none;\">\n");
      out.write("            <b>Quick Execution</b> (Select the table) &nbsp;&nbsp;&nbsp;\n");
      out.write("            <select name=\"tableList\" id=\"tableList\" onchange=\"getColumns()\">\n");
      out.write("                <option value=\"\" disabled selected>Loading .. </option>\n");
      out.write("            </select>\n");
      out.write("            &nbsp;&nbsp;&nbsp;Limit :\n");
      out.write("            <select name=\"recordLimit\" id=\"recordLimit\" onchange=\"handleLimitChange()\">\n");
      out.write("                <option value=\"50\" selected>50</option>\n");
      out.write("                <option value=\"100\">100</option>\n");
      out.write("                <option value=\"1000\">1000</option>\n");
      out.write("                <option value=\"5000\">5000</option>\n");
      out.write("            </select>\n");
      out.write("            &nbsp;&nbsp;&nbsp <button onclick=\"refreshTable()\">REFRESH</button>\n");
      out.write("            <br><p style=\"font-size: 15px;\"> Note: Use Manual Execution below after selecting the table from the above dropdown for complex query.</p>\n");
      out.write("            <!-- <button onclick=\"generateSQL('')\" id=\"sqlGen\">Generate Select query for selected table</button> -->\n");
      out.write("        </div>\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <div id=\"queryOutputContainer\" style=\"display: none;\" class=\"fixTableHead\"><table id=\"queryOutput\"></table></div>\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("\n");
      out.write("        <b>Manual Execution</b>(Only DQL)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n");
      out.write("        <br />\n");
      out.write("        <textarea id=\"query\" rows=\"10\" cols=\"50\" style=\"height: 100px; width: 500px;\"> </textarea><br />\n");
      out.write("        <p style=\"font-size: 11px; display: none;\" id=\"suggestionHint\">* Click on the matching suggestion to autocomplete</p>\n");
      out.write("        <select id=\"autocomplete-container\" style=\"height: 80px; width: 250px; overflow-y: scroll; display: none;\"></select>\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <button onclick=\"execute()\">Execute</button><br />\n");
      out.write("        <br />\n");
      out.write("        <br />\n");
      out.write("        <div id=\"response\" style=\"display: none;\">\n");
      out.write("            <textarea readonly id=\"output\" name=\"output\" rows=\"10\" cols=\"50\" style=\"font-size: 18px; color: white; background-color: black;\"></textarea>\n");
      out.write("        </div>\n");
      out.write("        <script>\n");
      out.write("            var test = \"\";\n");
      out.write("            var SAS_META;\n");
      out.write("            var QUERY_OUTPUT = \"\";\n");
      out.write("            var CURRENT_TABLE_PK = \"\";\n");
      out.write("            var TABLE_LIST = [];\n");
      out.write("\n");
      out.write("            var COLUMN_LIST = [];\n");
      out.write("\n");
      out.write("            setElementValue(\"zsid\", \"admin\");\n");
      out.write("            function getSASMeta() {\n");
      out.write("                fetch(\"/api/v1/sas/meta\", {\n");
      out.write("                    method: \"GET\",\n");
      out.write("                })\n");
      out.write("                    .then((response) => {\n");
      out.write("                        return response.text();\n");
      out.write("                    })\n");
      out.write("                    .then((data) => {\n");
      out.write("                        SAS_META = JSON.parse(data);\n");
      out.write("                        getDBCredential(false);\n");
      out.write("                    })\n");
      out.write("                    .catch((error) => {\n");
      out.write("                        console.log(error);\n");
      out.write("                    });\n");
      out.write("            }\n");
      out.write("            getSASMeta();\n");
      out.write("\n");
      out.write("            const textArea = document.getElementById(\"query\");\n");
      out.write("            const autocompleteContainer = document.getElementById(\"autocomplete-container\");\n");
      out.write("\n");
      out.write("            const isMobile =\n");
      out.write("                navigator.userAgent.match(/Android/i) ||\n");
      out.write("                navigator.userAgent.match(/webOS/i) ||\n");
      out.write("                navigator.userAgent.match(/iPhone/i) ||\n");
      out.write("                navigator.userAgent.match(/iPad/i) ||\n");
      out.write("                navigator.userAgent.match(/iPod/i) ||\n");
      out.write("                navigator.userAgent.match(/BlackBerry/i) ||\n");
      out.write("                navigator.userAgent.match(/Windows Phone/i);\n");
      out.write("            if (!isMobile) {\n");
      out.write("                textArea.addEventListener(\"input\", function () {\n");
      out.write("                    autocompleteContainer.style.display = \"block\";\n");
      out.write("                    document.getElementById(\"suggestionHint\").style.display = \"block\";\n");
      out.write("                    autocompleteContainer.innerHTML = \"\";\n");
      out.write("                    const userInput = textArea.value;\n");
      out.write("                    var lastWords = userInput.split(\" \");\n");
      out.write("                    var lastWord = lastWords.pop();\n");
      out.write("                    lastWord = lastWord == \"\"? lastWords.pop() : lastWord;\n");
      out.write("                    const defaultList = [\"Select\", \"Where\", \"From\", \"Order By\", \"Group By\", \"Top\", \"Having\", \"Limit\", \"DESC\", \"ASC\", \"Count(*)\", \"LIKE\"];\n");
      out.write("                    const filteredSuggestions = defaultList.concat(COLUMN_LIST.map(column => document.getElementById(\"tableList\").value + \".\" +   column)).concat(TABLE_LIST).filter((suggestion) => suggestion.toLowerCase().match(lastWord.toLowerCase() + \"(.*)\"));\n");
      out.write("                    //console.log(filteredSuggestions);\n");
      out.write("                    if (filteredSuggestions.length == 0) {\n");
      out.write("                        autocompleteContainer.style.display = \"none\";\n");
      out.write("                        document.getElementById(\"suggestionHint\").style.display = \"none\";\n");
      out.write("                        return;\n");
      out.write("                    }\n");
      out.write("                    autocompleteContainer.innerHTML = \"\";\n");
      out.write("                    filteredSuggestions.forEach((suggestion) => {\n");
      out.write("                        const li = document.createElement(\"option\");\n");
      out.write("                        li.textContent = suggestion;\n");
      out.write("                        li.addEventListener(\"click\", function () {\n");
      out.write("                            const words = userInput.split(\" \");\n");
      out.write("                            if(words.pop()==\" \") words.pop(); // Remove the last incomplete word\n");
      out.write("                            words.push(suggestion.split(\".\").length>1? suggestion.split(\".\")[1] : suggestion);\n");
      out.write("                            textArea.value = words.join(\" \") + \" \"; // Update the textarea content\n");
      out.write("                            autocompleteContainer.innerHTML = \"\";\n");
      out.write("                            autocompleteContainer.style.display = \"none\";\n");
      out.write("                            document.getElementById(\"suggestionHint\").style.display = \"none\";\n");
      out.write("                            textArea.focus();\n");
      out.write("                        });\n");
      out.write("                        autocompleteContainer.appendChild(li);\n");
      out.write("                    });\n");
      out.write("                    autocompleteContainer.size = autocompleteContainer.options.length == 1 ? 2 : autocompleteContainer.options.length;\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function execute() {\n");
      out.write("                unHideElement(\"response\");\n");
      out.write("                if(!preExecutionValidation())\n");
      out.write("                {   \n");
      out.write("                  return;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                if (document.getElementById(\"pk\").value.length == 0 && document.getElementById(\"zsid\").value.length == 0) {\n");
      out.write("                    alert(\"Please enter a valid ZSID or PK value\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("                 unHideElement(\"loading\");\n");
      out.write("\n");
      out.write("                const params = new URLSearchParams();\n");
      out.write("                params.append(\"server\", document.querySelector('input[name=\"server\"]:checked').value);\n");
      out.write("                params.append(\"ip\", document.getElementById(\"ip\").value);\n");
      out.write("                params.append(\"user\", document.getElementById(\"user\").value);\n");
      out.write("                params.append(\"password\", document.getElementById(\"password\").value);\n");
      out.write("                params.append(\"zsid\", document.getElementById(\"zsid\").value);\n");
      out.write("                params.append(\"pk\", document.getElementById(\"pk\").value);\n");
      out.write("                params.append(\"query\", document.getElementById(\"query\").value);\n");
      out.write("\n");
      out.write("                var res;\n");
      out.write("                fetch(\"/api/v1/sas/execute?\" + params, {\n");
      out.write("                    method: \"GET\",\n");
      out.write("                })\n");
      out.write("                    .then((response) => {\n");
      out.write("                        return response.text();\n");
      out.write("                    })\n");
      out.write("                    .then((data) => {\n");
      out.write("                        if (data == \"key_expired\") {\n");
      out.write("                            getSASMeta();\n");
      out.write("                            return data;\n");
      out.write("                        }\n");
      out.write("                        hideElement(\"loading\");\n");
      out.write("                        res = data;\n");
      out.write("                        var temp = JSON.parse(data);\n");
      out.write("                        if (Array.isArray(temp[\"query_output\"])) {\n");
      out.write("                            QUERY_OUTPUT = temp[\"query_output\"];\n");
      out.write("                            delete temp[\"query_output\"];\n");
      out.write("                        }\n");
      out.write("                        else if(temp[\"query_output\"] !=undefined && temp[\"query_output\"]!= null)\n");
      out.write("                        {\n");
      out.write("                            handleQueryOutputForFailed();\n");
      out.write("                            setElementValue(\"output\", temp[\"query_output\"]);\n");
      out.write("                            return;\n");
      out.write("                        }\n");
      out.write("                        setElementValue(\"output\", \"EXECUTION_INFO : \\n\" + JSON.stringify(temp, null, 2));\n");
      out.write("                        handleQueryOutput(JSON.parse(data), \"\", \"\");\n");
      out.write("                    })\n");
      out.write("                    .catch((error) => {\n");
      out.write("                        hideElement(\"loading\");\n");
      out.write("                        console.log(error);\n");
      out.write("                        setElementValue(\"output\", res);\n");
      out.write("                        alert(\"Something went wrong. Please check the error response below and try again.\");\n");
      out.write("                        handleQueryOutputForFailed();\n");
      out.write("                    });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function generateSQL(criteria) {\n");
      out.write("                if (getElementValue(\"tableList\").length == 0) {\n");
      out.write("                    alert(\"Populate table first\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("                if (criteria.length == 0) document.getElementById(\"query\").value = \"Select * from \" + document.getElementById(\"tableList\").value + getLimitAndOrderBy();\n");
      out.write("                else document.getElementById(\"query\").value = \"Select * from \" + document.getElementById(\"tableList\").value + \" where \" + criteria + \" LIKE\" + '\"%' + document.getElementById(criteria).value + '%\"' + getLimitAndOrderBy();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function getTables() {\n");
      out.write("                TABLE_LIST = []\n");
      out.write("                if(!preExecutionValidation())\n");
      out.write("                {   \n");
      out.write("                  return;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                const params = new URLSearchParams();\n");
      out.write("                params.append(\"server\", document.querySelector('input[name=\"server\"]:checked').value);\n");
      out.write("                params.append(\"ip\", document.getElementById(\"ip\").value);\n");
      out.write("                params.append(\"user\", document.getElementById(\"user\").value);\n");
      out.write("                params.append(\"password\", document.getElementById(\"password\").value);\n");
      out.write("                params.append(\"pk\", document.getElementById(\"pk\").value);\n");
      out.write("                params.append(\"need_table\", \"true\");\n");
      out.write("                unHideElement(\"loading\");\n");
      out.write("\n");
      out.write("                var res;\n");
      out.write("\n");
      out.write("                fetch(\"/api/v1/sas/execute?\" + params, {\n");
      out.write("                    method: \"GET\",\n");
      out.write("                })\n");
      out.write("                    .then((response) => {\n");
      out.write("                        return response.text();\n");
      out.write("                    })\n");
      out.write("                    .then((data) => {\n");
      out.write("                        if (data == \"key_expired\") {\n");
      out.write("                            getSASMeta();\n");
      out.write("                            return data;\n");
      out.write("                        }\n");
      out.write("                        res = data;\n");
      out.write("                        TABLE_LIST = JSON.parse(data);\n");
      out.write("                        hideElement(\"quickExe\")\n");
      out.write("                        hideElement(\"loading\");\n");
      out.write("                        unHideElement(\"response\");\n");
      out.write("                        populateTables();\n");
      out.write("                        unHideElement(\"tableSelection\")\n");
      out.write("                    })\n");
      out.write("                    .then((data) => {\n");
      out.write("                        unHideElement(\"response\");\n");
      out.write("                        if (data != \"key_expired\") getColumns();\n");
      out.write("                    })\n");
      out.write("                    .catch((error) => {\n");
      out.write("                        unHideElement(\"response\");\n");
      out.write("                        hideElement(\"loading\");\n");
      out.write("                        unHideElement(\"quickExe\");\n");
      out.write("                        setElementValue(\"output\", res);\n");
      out.write("                        hideElement(\"tableSelection\");\n");
      out.write("                        hideElement(\"queryOutputContainer\");\n");
      out.write("                        console.log(error);\n");
      out.write("                        alert(\"Something went wrong. Please check the error response below and try again.\");\n");
      out.write("                    });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function getColumns() {\n");
      out.write("                if(!preExecutionValidation())\n");
      out.write("                {   \n");
      out.write("                  return;\n");
      out.write("                }\n");
      out.write("                COLUMN_LIST = []\n");
      out.write("                setElementValue(\"recordLimit\", \"50\")\n");
      out.write("                const params = new URLSearchParams();\n");
      out.write("                params.append(\"server\", document.querySelector('input[name=\"server\"]:checked').value);\n");
      out.write("                params.append(\"ip\", document.getElementById(\"ip\").value);\n");
      out.write("                params.append(\"user\", document.getElementById(\"user\").value);\n");
      out.write("                params.append(\"password\", document.getElementById(\"password\").value);\n");
      out.write("                params.append(\"need_column\", \"true\");\n");
      out.write("                params.append(\"table\", document.getElementById(\"tableList\").value);\n");
      out.write("                unHideElement(\"loading\");\n");
      out.write("                var res;\n");
      out.write("                fetch(\"/api/v1/sas/execute?\" + params, {\n");
      out.write("                    method: \"GET\",\n");
      out.write("                })\n");
      out.write("                    .then((response) => {\n");
      out.write("                        return response.text();\n");
      out.write("                    })\n");
      out.write("                    .then((data) => {\n");
      out.write("                        if (data == \"key_expired\") {\n");
      out.write("                            getSASMeta();\n");
      out.write("                            return data;\n");
      out.write("                        }\n");
      out.write("                        res = data;\n");
      out.write("                        var columns = JSON.parse(data);\n");
      out.write("                        populateColumn(columns);\n");
      out.write("                        if (getElementValue(\"pk\").length != 0 || getElementValue(\"zsid\").length != 0) {\n");
      out.write("                            setElementValue(\"query\", \"Select * from \" + document.getElementById(\"tableList\").value + getLimitAndOrderBy());\n");
      out.write("                        }\n");
      out.write("                    })\n");
      out.write("                    .then((data) => {\n");
      out.write("                        if (data != \"key_expired\" && (getElementValue(\"pk\").length != 0 || getElementValue(\"zsid\").length != 0)) {\n");
      out.write("                        execute();\n");
      out.write("                        }\n");
      out.write("                        else\n");
      out.write("                            hideElement(\"loading\");\n");
      out.write("\n");
      out.write("                    })\n");
      out.write("                    .catch((error) => {\n");
      out.write("                         hideElement(\"loading\");\n");
      out.write("                        setElementValue(\"output\", res);\n");
      out.write("                        handleQueryOutputForFailed();\n");
      out.write("                        alert(\"Something went wrong. Please check the error response below and try again.\");\n");
      out.write("                    });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function populateTables() {\n");
      out.write("                    var tableListOptions = \"\";\n");
      out.write("                    for (var i in TABLE_LIST) {\n");
      out.write("                        tableListOptions += \"<option >\" + TABLE_LIST[i] + \"</option>\";\n");
      out.write("                    }\n");
      out.write("                    document.getElementById(\"tableList\").innerHTML = tableListOptions;\n");
      out.write("                    if (getElementValue(\"zsid\") == \"admin\")\n");
      out.write("                        if(document.getElementById(\"mysql\").checked)\n");
      out.write("                         document.querySelector(\"#tableList\").value = \"SASAccounts\";\n");
      out.write("                         else\n");
      out.write("                             document.querySelector(\"#tableList\").value = \"sasaccounts\";\n");
      out.write("\n");
      out.write("                }\n");
      out.write("            function populateColumn(columnMeta) {\n");
      out.write("                const columnListRes = columnMeta.columns;\n");
      out.write("                CURRENT_TABLE_PK = columnMeta.pk;\n");
      out.write("                COLUMN_LIST = [];\n");
      out.write("                for (var column in columnListRes) {\n");
      out.write("                    COLUMN_LIST.push(columnListRes[column]);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function getLimitAndOrderBy() {\n");
      out.write("                const orderBy = CURRENT_TABLE_PK.length == 0? \"\" : \" Order By \" + CURRENT_TABLE_PK + \" DESC\"\n");
      out.write("                const limit = getElementValue(\"recordLimit\");\n");
      out.write("                return orderBy + \" LIMIT \" + limit;\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function handleQueryOutput(outputJson, criteria, criteriaValue) {\n");
      out.write("            \n");
      out.write("                if (!Array.isArray(outputJson.query_output) || outputJson.query_output.length == 0) {\n");
      out.write("                    document.getElementById(\"queryOutput\").innerHTML = \"\";\n");
      out.write("                    hideElement(\"queryOutputContainer\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var tableOutput = \"\";\n");
      out.write("                var tableHeader = \"<thead><tr><th>S.No</th>\";\n");
      out.write("                for (var i in outputJson.query_output[0]) {\n");
      out.write("                    var criteriaTag = \"\";\n");
      out.write("                    if (criteria != i) criteriaTag = '<br><input type=\"text\" autocomplete=\"off\" id=\"' + i + '\" oninput=\"getFiltered(' + \"'\" + i + \"'\" + ')\" placeholder=\"Search\" title=\"eg.(abc or >5 or <10 or>5<10)\"/><br><button style=\"width:80px;background-color:grey;font-size: 10px;\" title=\"Search for the criteria without applying limit\" onclick=\"getFilteredFromDB(' + \"'\" + i + \"'\" + ')\">Hit DB</button>';\n");
      out.write("                    else criteriaTag = '<br><input type=\"text\" autocomplete=\"off\" value=\"' + criteriaValue + '\" id=\"' + i + '\" oninput=\"getFiltered(' + \"'\" + i + \"'\" + ')\" placeholder=\"Search\" title=\"eg.(abc or >5 or <10 or>5<10)\"/><br><button style=\"width:80px;background-color:grey;font-size: 10px;\" title=\"Search for the criteria without applying limit\" onclick=\"getFilteredFromDB(' + \"'\" + i + \"'\" + ')\">Hit DB</button>';\n");
      out.write("                    tableHeader += \"<th>\" + i + criteriaTag + \"</th>\";\n");
      out.write("                }\n");
      out.write("                tableOutput += tableHeader + \"</tr></thead>\";\n");
      out.write("\n");
      out.write("                var tableRows = \"<tbody>\";\n");
      out.write("                var isEmpty = outputJson.query_output[0][COLUMN_LIST[0]] == \"<EMPTY>\";\n");
      out.write("                for (var i in outputJson.query_output) {\n");
      out.write("                    if (!isEmpty) tableRows += \"<tr><td>\" + (Number(i) + 1) + \"</td>\";\n");
      out.write("                    else tableRows += \"<tr><td></td>\";\n");
      out.write("                    for (var j in outputJson.query_output[i]) {\n");
      out.write("                        tableRows += \"<td>\" + escapeHtml(outputJson.query_output[i][j]) + \"</td>\";\n");
      out.write("                    }\n");
      out.write("                    tableRows += \"</tr></tbody>\";\n");
      out.write("                }\n");
      out.write("                tableOutput += tableRows;\n");
      out.write("                unHideElement(\"queryOutputContainer\");\n");
      out.write("                document.getElementById(\"queryOutput\").innerHTML = tableOutput;\n");
      out.write("\n");
      out.write("                if (document.getElementById(criteria) != null) {\n");
      out.write("                    var end = getElementValue(criteria).length;\n");
      out.write("                    document.getElementById(criteria).setSelectionRange(end, end);\n");
      out.write("                    document.getElementById(criteria).focus();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function getFiltered(criteriaColumn) {\n");
      out.write("                var filteredRows = [];\n");
      out.write("                var criteriaVal = getElementValue(criteriaColumn);\n");
      out.write("                var criteriaValAux = criteriaVal;\n");
      out.write("                criteriaVal = criteriaVal.toLowerCase();\n");
      out.write("                var gl = new RegExp(\">(.*)<(.+)\");\n");
      out.write("                var gt = new RegExp(\">(.+)\");\n");
      out.write("                var lt = new RegExp(\"<(.+)\");\n");
      out.write("                if (gl.exec(criteriaVal) != null) {\n");
      out.write("                    const num1 = Number((gl.exec(criteriaVal)[1]).trim());\n");
      out.write("                    const num2 = Number((gl.exec(criteriaVal)[2]).trim());\n");
      out.write("\n");
      out.write("                    for (var i in QUERY_OUTPUT) {\n");
      out.write("                        for (var column in QUERY_OUTPUT[i]) {\n");
      out.write("                            const columnValue = Number(QUERY_OUTPUT[i][column]);\n");
      out.write("                            if (isValidColumn(criteriaColumn, column, columnValue) && columnValue > num1 && columnValue < num2) {\n");
      out.write("                                filteredRows.push(QUERY_OUTPUT[i]);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                } else if (gt.exec(criteriaVal) != null) {\n");
      out.write("                    const num = Number((gt.exec(criteriaVal)[1]).trim());\n");
      out.write("                    for (var i in QUERY_OUTPUT) {\n");
      out.write("                        for (var column in QUERY_OUTPUT[i]) {\n");
      out.write("                         const columnValue = Number(QUERY_OUTPUT[i][column]);\n");
      out.write("                            if (isValidColumn(criteriaColumn, column, columnValue) && columnValue > num) {\n");
      out.write("                                filteredRows.push(QUERY_OUTPUT[i]);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                } else if (lt.exec(criteriaVal) != null) {\n");
      out.write("                    const num = Number((lt.exec(criteriaVal)[1]).trim());\n");
      out.write("                    for (var i in QUERY_OUTPUT) {\n");
      out.write("                        for (var column in QUERY_OUTPUT[i]) {\n");
      out.write("                              const columnValue = Number(QUERY_OUTPUT[i][column]);\n");
      out.write("                            if(isValidColumn(criteriaColumn, column, columnValue) && columnValue < num) {\n");
      out.write("                                filteredRows.push(QUERY_OUTPUT[i]);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                } else {\n");
      out.write("                    var filteredRowsAux = [];\n");
      out.write("                    for (var i in QUERY_OUTPUT) {\n");
      out.write("                        for (var j in QUERY_OUTPUT[i]) {\n");
      out.write("                            if (j == criteriaColumn && QUERY_OUTPUT[i][j].toLowerCase() == criteriaVal.trim()) {\n");
      out.write("                                filteredRows.push(QUERY_OUTPUT[i]);\n");
      out.write("                            } else if (j == criteriaColumn && QUERY_OUTPUT[i][j].toLowerCase().match(\"(.*)\" + criteriaVal.trim() + \"(.*)\")) {\n");
      out.write("                                filteredRowsAux.push(QUERY_OUTPUT[i]);\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    filteredRows = filteredRows.concat(filteredRowsAux);\n");
      out.write("                }\n");
      out.write("                if (filteredRows.length == 0) {\n");
      out.write("                    var emptyRow = {};\n");
      out.write("                    for (var i in QUERY_OUTPUT[0]) {\n");
      out.write("                        emptyRow[i] = \"<EMPTY>\";\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    filteredRows.push(emptyRow);\n");
      out.write("                }\n");
      out.write("                handleQueryOutput({ query_output: filteredRows }, criteriaColumn, criteriaValAux);\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function getDBCredential(isProductSwitch) {\n");
      out.write("                var product = getElementValue(\"product\");\n");
      out.write("                var space = getElementValue(\"zsid\");\n");
      out.write("                var pkValue = getElementValue(\"pk\");\n");
      out.write("                 if(isProductSwitch){\n");
      out.write("                     TABLE_LIST = [];\n");
      out.write("                     COLUMN_LIST = [];\n");
      out.write("                     setElementValue(\"zsid\", \"admin\");\n");
      out.write("                     hideElement(\"queryOutputContainer\");\n");
      out.write("                     hideElement(\"tableSelection\");\n");
      out.write("                     if(product == \"custom\")\n");
      out.write("                        unHideElement(\"quickExe\");\n");
      out.write("                     setElementValue(\"query\", \"\")\n");
      out.write("                     hideElement(\"response\", \"\")\n");
      out.write("                     }\n");
      out.write("\n");
      out.write("                setElementValue(\"recordLimit\", \"50\");\n");
      out.write("                \n");
      out.write("                if (product == \"books\") {\n");
      out.write("                    setElementChecked(\"postgresql\", false);\n");
      out.write("                    setElementChecked(\"mysql\", true);             \n");
      out.write("                    \n");
      out.write("                    setElementValue(\"ip\", SAS_META.books.ip);\n");
      out.write("                    setElementValue(\"user\", SAS_META.books.user);\n");
      out.write("                    setElementValue(\"password\", SAS_META.books.password);\n");
      out.write("\n");
      out.write("                    populateNeededEntity();\n");
      out.write("\n");
      out.write("                } else if (product == \"pay\") {\n");
      out.write("                \n");
      out.write("                    setElementChecked(\"postgresql\", true);\n");
      out.write("                    setElementChecked(\"mysql\", false);             \n");
      out.write("                    \n");
      out.write("                    setElementValue(\"ip\", SAS_META.pay.ip);\n");
      out.write("                    setElementValue(\"user\", SAS_META.pay.user);\n");
      out.write("                    setElementValue(\"password\", SAS_META.pay.password);\n");
      out.write("\n");
      out.write("                    populateNeededEntity();\n");
      out.write("                }\n");
      out.write("                  else if(product == \"custom\")\n");
      out.write("                  {\n");
      out.write("                    if(isProductSwitch)\n");
      out.write("                    {\n");
      out.write("                    setElementChecked(\"postgresql\", false);\n");
      out.write("                    setElementChecked(\"mysql\", false);\n");
      out.write("\n");
      out.write("                    setElementValue(\"ip\", \"\");\n");
      out.write("                    setElementValue(\"user\", \"\");\n");
      out.write("                    setElementValue(\"password\", \"\");\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if(getElementValue(\"ip\").length!=0 && getElementValue(\"user\").length !=0)\n");
      out.write("                         populateNeededEntity();\n");
      out.write("                    else\n");
      out.write("                        setElementValue(\"zsid\", \"admin\")\n");
      out.write("                  }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            document.addEventListener(\"click\", function (event) {\n");
      out.write("                if (!document.getElementById(\"query\").contains(event.target)) {\n");
      out.write("                    autocompleteContainer.style.display = \"none\";\n");
      out.write("                     hideElement(\"suggestionHint\");\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            document.addEventListener(\"keyup\", (event) => {\n");
      out.write("                if (event.code === \"Space\") {\n");
      out.write("                    autocompleteContainer.style.display = \"none\";\n");
      out.write("                    document.getElementById(\"suggestionHint\").style.display = \"none\";\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            function escapeHtml(text)\n");
      out.write("            {\n");
      out.write("            if(text == \"<EMPTY>\" || text == null)\n");
      out.write("              return text;\n");
      out.write("              var map = {\n");
      out.write("                '&': '&amp;',\n");
      out.write("                '<': '&lt;',\n");
      out.write("                '>': '&gt;',\n");
      out.write("                '\"': '&quot;',\n");
      out.write("                \"'\": '&#039;'\n");
      out.write("              };\n");
      out.write("              return text.replace(/[&<>\"']/g, function(m) {\n");
      out.write("                return map[m];\n");
      out.write("              });\n");
      out.write("           }\n");
      out.write("\n");
      out.write("            function handleQueryOutputForFailed()\n");
      out.write("            {\n");
      out.write("                        var failed = {};\n");
      out.write("                        for (var column in COLUMN_LIST) {\n");
      out.write("                            failed[COLUMN_LIST[column]] = \"Failed\";\n");
      out.write("                        }\n");
      out.write("                        if (COLUMN_LIST.length == 0)\n");
      out.write("                            hideElement(\"queryOutputContainer\")\n");
      out.write("                         else\n");
      out.write("                            handleQueryOutput({ query_output: [failed] }, \"\", \"\");\n");
      out.write("            }\n");
      out.write("              \n");
      out.write("              function preExecutionValidation()\n");
      out.write("              {\n");
      out.write("                if (document.querySelector('input[name=\"server\"]:checked') == null) {\n");
      out.write("                    alert(\"Choose DB Server\");\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("                if (document.getElementById(\"ip\").value.length == 0) {\n");
      out.write("                    alert(\"Please enter a valid Main Cluster IP \");\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("                if (document.getElementById(\"user\").value.length == 0) {\n");
      out.write("                    alert(\"Please enter a valid User\");\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("                return true;\n");
      out.write("              }\n");
      out.write("              function isValidColumn(criteriaColumn, currentColumn, value)\n");
      out.write("              {\n");
      out.write("                return criteriaColumn ==currentColumn && value == Number(value);\n");
      out.write("              }\n");
      out.write("              function getElementValue(elementID)\n");
      out.write("              {\n");
      out.write("                return document.getElementById(elementID).value;\n");
      out.write("              }\n");
      out.write("              function setElementValue(elementID, value)\n");
      out.write("              {\n");
      out.write("                 document.getElementById(elementID).value = value;;\n");
      out.write("              }\n");
      out.write("             function hideElement(elementID)\n");
      out.write("             {\n");
      out.write("                  document.getElementById(elementID).style.display = \"none\";\n");
      out.write("              }\n");
      out.write("              function unHideElement(elementID)\n");
      out.write("              {\n");
      out.write("                 document.getElementById(elementID).style.display = \"block\";\n");
      out.write("               }\n");
      out.write("              function setElementChecked(elementID, value)\n");
      out.write("              {\n");
      out.write("                return document.getElementById(elementID).checked= value;\n");
      out.write("              }\n");
      out.write("              function getFilteredFromDB(criteriaColumn)\n");
      out.write("              {\n");
      out.write("                var filteredRows = [];\n");
      out.write("                var criteriaVal = getElementValue(criteriaColumn);\n");
      out.write("                var predicate = \"\"\n");
      out.write("                var gl = new RegExp(\">(.*)<(.+)\");\n");
      out.write("                var gt = new RegExp(\">(.+)\");\n");
      out.write("                var lt = new RegExp(\"<(.+)\");\n");
      out.write("                if (gl.exec(criteriaVal) != null) {\n");
      out.write("                    const num1 = Number((gl.exec(criteriaVal)[1]).trim());\n");
      out.write("                    const num2 = Number((gl.exec(criteriaVal)[2]).trim());\n");
      out.write("                    predicate = \" Where \" + criteriaColumn + \" > \" + num1 + \" AND \" + criteriaColumn + \" < \" + num2;\n");
      out.write("\n");
      out.write("                } else if (gt.exec(criteriaVal) != null) {\n");
      out.write("                    const num = Number((gt.exec(criteriaVal)[1]).trim());\n");
      out.write("                      predicate = \" Where \" + criteriaColumn + \" > \" + num;\n");
      out.write("                } else if (lt.exec(criteriaVal) != null) {\n");
      out.write("                    const num = Number((lt.exec(criteriaVal)[1]).trim());\n");
      out.write("                      predicate = \" Where \" + criteriaColumn + \" < \" + num;\n");
      out.write("                } else if(criteriaVal.trim().length != 0) {\n");
      out.write("                    const value = criteriaVal.trim();\n");
      out.write("                    predicate = \" Where \" + criteriaColumn + \" LIKE '%\" + value + \"%'\";\n");
      out.write("                }\n");
      out.write("                else\n");
      out.write("                {\n");
      out.write("                    alert(\"Invalid criteria\");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("                setElementValue(\"query\", \"Select * from \" + getElementValue(\"tableList\") + predicate);\n");
      out.write("                execute();\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              function populateNeededEntity()\n");
      out.write("              {\n");
      out.write("                    if(TABLE_LIST.length == 0)\n");
      out.write("                        getTables();\n");
      out.write("                    else if(COLUMN_LIST.length == 0)\n");
      out.write("                        getColumns()\n");
      out.write("                    else\n");
      out.write("                        execute();\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              function refreshTable()\n");
      out.write("              {\n");
      out.write("                setElementValue(\"query\", \"Select * from \" + getElementValue(\"tableList\") + getLimitAndOrderBy());\n");
      out.write("                execute();\n");
      out.write("              }\n");
      out.write("\n");
      out.write("              function handleLimitChange()\n");
      out.write("              {\n");
      out.write("                setElementValue(\"query\", \"Select * from \" + document.getElementById(\"tableList\").value + getLimitAndOrderBy())\n");
      out.write("                execute()\n");
      out.write("              }\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
